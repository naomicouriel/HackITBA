// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  role           String          @default("STUDENT") // valores posibles: "STUDENT" o "PROFESSOR"
  courses        Course[]        @relation("ProfessorCourses")
  answers        StudentAnswer[] @relation("StudentAnswers")
  studentQuizzes StudentQuiz[]   // Relación a las asignaciones de quiz
}


model Course {
  id          Int       @id @default(autoincrement())
  name        String
  professor   User      @relation("ProfessorCourses", fields: [professorId], references: [id])
  professorId Int
  quizzes     Quiz[]
  topics      Topic[]
  segments    Segment[]
}

model Quiz {
  id             Int             @id @default(autoincrement())
  threshold      Int
  module         String
  course         Course          @relation(fields: [courseId], references: [id])
  courseId       Int
  questions      Question[]
  studentQuizzes StudentQuiz[]   // Relación a las asignaciones de quiz
}



model Question {
  id               Int       @id @default(autoincrement())
  question         String
  optionsJson      String
  correctAnswerKey String
  answer           String
  quiz             Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId           Int
  responses        StudentAnswer[]

  // Nuevo campo (opcional, si quieres vincular pregunta -> tópico)
  topic           Topic?    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId         Int?
}




model StudentAnswer {
  id         Int      @id @default(autoincrement())
  student    User     @relation("StudentAnswers", fields: [studentId], references: [id])
  studentId  Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  response   String
  isCorrect  Boolean
  createdAt  DateTime @default(now())
}

model Topic {
  id        Int     @id @default(autoincrement())
  name      String
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
  resumen   Resumen[]
  questions Question[]
}

model Segment {
  id        Int     @id @default(autoincrement())
  start     Float
  end       Float
  text      String
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
}

model StudentQuiz {
  id        Int    @id @default(autoincrement())
  student   User   @relation(fields: [studentId], references: [id])
  studentId Int
  quiz      Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    Int
  status    String @default("pending")
}

model Resumen {
  id                 Int      @id @default(autoincrement())
  topic              Topic    @relation(fields: [topicId], references: [id])
  topicId            Int
  summary            String
  transcriptSegment  String
  startTime          Float
  endTime            Float
  keyTerms           String?   // puedes guardar esto como JSON stringify
  relatedTopics      String?   // igual, para "["temaRelacionado"]"
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}
